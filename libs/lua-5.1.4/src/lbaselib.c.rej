***************
*** 18,23 ****
  
  #include "lauxlib.h"
  #include "lualib.h"
  
  
  
--- 18,26 ----
  
  #include "lauxlib.h"
  #include "lualib.h"
+ #ifndef COCO_DISABLE
+ #include "lcoco.h"
+ #endif
  
  
  
***************
*** 524,530 ****
      return -1;  /* error flag */
    }
    lua_xmove(L, co, narg);
-   lua_setlevel(L, co);
    status = lua_resume(co, narg);
    if (status == 0 || status == LUA_YIELD) {
      int nres = lua_gettop(co);
--- 527,532 ----
      return -1;  /* error flag */
    }
    lua_xmove(L, co, narg);
    status = lua_resume(co, narg);
    if (status == 0 || status == LUA_YIELD) {
      int nres = lua_gettop(co);
***************
*** 573,582 ****
  }
  
  
  static int luaB_cocreate (lua_State *L) {
    lua_State *NL = lua_newthread(L);
    luaL_argcheck(L, lua_isfunction(L, 1) && !lua_iscfunction(L, 1), 1,
      "Lua function expected");
    lua_pushvalue(L, 1);  /* move function to top */
    lua_xmove(L, NL, 1);  /* move function from L to NL */
    return 1;
--- 575,601 ----
  }
  
  
+ #ifndef COCO_DISABLE
+ static int luaB_cstacksize (lua_State *L)
+ {
+   lua_pushinteger(L, luaCOCO_cstacksize(luaL_optint(L, 1, -1)));
+   return 1;
+ }
+ #endif
+ 
+ 
  static int luaB_cocreate (lua_State *L) {
+ #ifdef COCO_DISABLE
    lua_State *NL = lua_newthread(L);
    luaL_argcheck(L, lua_isfunction(L, 1) && !lua_iscfunction(L, 1), 1,
      "Lua function expected");
+ #else
+   int cstacksize = luaL_optint(L, 2, 0);
+   lua_State *NL = lua_newcthread(L, cstacksize);
+   luaL_argcheck(L, lua_isfunction(L, 1) &&
+                    (cstacksize >= 0 ? 1 : !lua_iscfunction(L, 1)),
+                 1, "Lua function expected");
+ #endif
    lua_pushvalue(L, 1);  /* move function to top */
    lua_xmove(L, NL, 1);  /* move function from L to NL */
    return 1;
***************
*** 609,614 ****
    {"status", luaB_costatus},
    {"wrap", luaB_cowrap},
    {"yield", luaB_yield},
    {NULL, NULL}
  };
  
--- 628,636 ----
    {"status", luaB_costatus},
    {"wrap", luaB_cowrap},
    {"yield", luaB_yield},
+ #ifndef COCO_DISABLE
+   {"cstacksize", luaB_cstacksize},
+ #endif
    {NULL, NULL}
  };
  
***************
*** 648,653 ****
  LUALIB_API int luaopen_base (lua_State *L) {
    base_open(L);
    luaL_register(L, LUA_COLIBNAME, co_funcs);
    return 2;
  }
  
--- 670,679 ----
  LUALIB_API int luaopen_base (lua_State *L) {
    base_open(L);
    luaL_register(L, LUA_COLIBNAME, co_funcs);
+ #ifndef COCO_DISABLE
+   lua_pushboolean(L, 1); 
+   lua_setfield(L, -2, "coco");
+ #endif
    return 2;
  }
  
